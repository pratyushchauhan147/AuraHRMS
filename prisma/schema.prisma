generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Department {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  employees   Employee[]
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      Role      @default(EMPLOYEE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  employee  Employee?
}

model Employee {
  id                      String              @id @default(cuid())
  firstName               String
  lastName                String
  position                String
  hireDate                DateTime            @default(now())
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  userId                  String              @unique
  jobSatisfaction         Int?
  notes                   String?
  performanceRating       Int?
  yearsSinceLastPromotion Int?
  departmentId            String?
  managerId               String?
  salary                  Float?
  address                 String?
  contactNumber           String?
  attendanceRecords       Attendance[]
  department              Department?         @relation(fields: [departmentId], references: [id])
  manager                 Employee?           @relation("ManagerialRelationship", fields: [managerId], references: [id])
  reports                 Employee[]          @relation("ManagerialRelationship")
  user                    User                @relation(fields: [userId], references: [id])
  submittedReports        EmployeeReport[]    @relation("SubmittedReports")
  targetedReports         EmployeeReport[]    @relation("TargetedReports")
  goals                   Goal[]
  leaveRequests           LeaveRequest[]
  performanceReviews      PerformanceReview[]
}

model EmployeeReport {
  id               String       @id @default(cuid())
  type             ReportType
  status           ReportStatus @default(NEW)
  title            String
  details          String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  targetEmployeeId String
  reporterId       String?
  reporter         Employee?    @relation("SubmittedReports", fields: [reporterId], references: [id])
  targetEmployee   Employee     @relation("TargetedReports", fields: [targetEmployeeId], references: [id])
}

model LeaveRequest {
  id         String      @id @default(cuid())
  startDate  DateTime
  endDate    DateTime
  reason     String?
  status     LeaveStatus @default(PENDING)
  createdAt  DateTime    @default(now())
  employeeId String
  employee   Employee    @relation(fields: [employeeId], references: [id])
}

model JobPosting {
  id           String        @id @default(cuid())
  title        String
  description  String
  isOpen       Boolean       @default(true)
  createdAt    DateTime      @default(now())
  applications Application[]
}

model Candidate {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  email        String        @unique
  phone        String?
  resumeUrl    String?
  applications Application[]
}

model Application {
  id           String            @id @default(cuid())
  status       ApplicationStatus @default(APPLIED)
  appliedAt    DateTime          @default(now())
  jobPostingId String
  candidateId  String
  candidate    Candidate         @relation(fields: [candidateId], references: [id])
  jobPosting   JobPosting        @relation(fields: [jobPostingId], references: [id])
  interviews   Interview[]
}

model Interview {
  id            String      @id @default(cuid())
  scheduledFor  DateTime
  feedback      String?
  applicationId String
  application   Application @relation(fields: [applicationId], references: [id])
}

model PerformanceReview {
  id                  String   @id @default(cuid())
  reviewDate          DateTime @default(now())
  rating              Int
  strengths           String
  areasForImprovement String
  employeeId          String
  employee            Employee @relation(fields: [employeeId], references: [id])
}

model Goal {
  id         String   @id @default(cuid())
  objective  String
  keyResults String
  status     String   @default("On Track")
  quarter    String
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Attendance {
  id         String   @id @default(cuid())
  date       DateTime
  employeeId String
  sessions   Json
  totalHours Float?
  overtime   Float?
  status     String   @default("PRESENT")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  employee   Employee @relation(fields: [employeeId], references: [id])
}

enum Role {
  ADMIN
  SENIOR_MANAGER
  HR_RECRUITER
  EMPLOYEE
}

enum LeaveStatus {
  PENDING
  APPROVED
  DENIED
}

enum ApplicationStatus {
  APPLIED
  SCREENING
  INTERVIEW
  OFFERED
  REJECTED
  HIRED
}

enum ReportType {
  COMPLAINT
  POSITIVE_REVIEW
  SUGGESTION
}

enum ReportStatus {
  NEW
  IN_REVIEW
  RESOLVED
  CLOSED
}
